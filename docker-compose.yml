version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}

services:

### NGINX Server #########################################
    nginx:
      build:
        context: ./nginx
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
          - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
          - http_proxy
          - https_proxy
          - no_proxy
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
        - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      networks:
        - frontend
        - backend
      restart: always

### Minio ################################################
    minio:
      build: ./minio
      volumes:
        - ${DATA_PATH_HOST}/minio/data:/export
        - ${DATA_PATH_HOST}/minio/config:/root/.minio
      ports:
        - "${MINIO_PORT}:9000"
        - "${MINIO_CONSOLE_PORT}:9001"
      environment:
        - MINIO_ROOT_USER=${MINIO_ROOT_USER}
        - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      networks:
        - frontend
        - backend
      restart: always

### MySQL ################################################
    mysql:
      build:
        context: ./mysql
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend
      restart: always

### MongoDB ##############################################
    mongo:
      build: ./mongo
      ports:
        - "${MONGODB_PORT}:27017"
      environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      volumes:
        - ${DATA_PATH_HOST}/mongo:/data/db
        - ${DATA_PATH_HOST}/mongo_config:/data/configdb
      networks:
        - backend
      restart: always
### Redis ################################################
    redis:
      build: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis:/data
      command: --requirepass ${REDIS_PASSWORD}
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend
      restart: always

### RabbitMQ #############################################
    rabbitmq:
      build: ./rabbitmq
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
        - "${RABBITMQ_WEB_STOMP_HOST_PORT}:15674"
      privileged: true
      hostname: rabbitmq
      volumes:
        - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
        - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
        - ./rabbitmq/management_agent.disable_metrics_collector.conf:/etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
      networks:
        - backend
      restart: always
### Jenkins ###################################################
    jenkins:
      build: ./jenkins
      environment:
        JAVA_OPTS: "-Djava.awt.headless=true"
      ports:
        - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
        - "${JENKINS_HOST_HTTP_PORT}:8080"
      privileged: true
      volumes:
        - ${JENKINS_HOME}:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - frontend
        - backend
      restart: always

### Portainer ################################################
    portainer:
      build:
        context: ./portainer
      volumes:
        - ${DATA_PATH_HOST}/portainer_data:/data
        - /var/run/docker.sock:/var/run/docker.sock
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - 9010:9000
      networks:
        - backend
      restart: always

### Nacos ################################################
    nacos:
      image: nacos/nacos-server:${NACOS_VERSION}
      env_file:
        - ./nacos/mysql.env
      volumes:
        - ./nacos/logs:/home/nacos/logs
        - ./nacos/custom.properties:/home/nacos/init.d/custom.properties
      ports:
        - "${NACOS_PORT}:8848"
      networks:
        - backend
      depends_on:
        - mysql
      restart: always

### ES ################################################
    cerebro:
      image: lmenezes/cerebro:${CEREBRO_VERSION}
      ports:
        - "${CEREBRO_PORT}:9000"
      restart: always
      command:
        - -Dhosts.0.host=http://elasticsearch:9200
      networks:
        - backend
    kibana:
      image: kibana:${KIBANA_VERSION}
      environment:
        - I18N_LOCALE=zh-CN
        - XPACK_GRAPH_ENABLED=true
        - TIMELION_ENABLED=true
        - XPACK_MONITORING_COLLECTION_ENABLED="true"
        - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
        - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      ports:
        - "${KIBANA_PORT}:5601"
      restart: always
      networks:
        - backend
    elasticsearch:
      image: elasticsearch:${ELASTICSEARCH_VERSION}
      container_name: elasticsearch_01
      environment:
        - cluster.name=dev-es
        - node.name=elasticsearch_01
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - "TZ=Asia/Shanghai"
        - discovery.type=single-node
        - path.data=node0_data
        - xpack.security.enabled=true
        - xpack.security.transport.ssl.enabled=false
      ulimits:
        memlock:
          soft: -1
          hard: -1
      privileged: true
      restart: always
      volumes:
        - ./elasticsearch/data:/usr/share/elasticsearch/data
      ports:
        - "${ELASTICSEARCH_PORT}:9200"
      networks:
        - backend

### Xxl-job ################################################
  xxl-job:
    image: xuxueli/xxl-job-admin:${XXL_JOB_VERSION}
    env_file:
      - ./xxl-job/xxl-job.env
    volumes:
      - ./xxl-job/logs:/data/applogs
    ports:
      - "${XXL_JOB_PORT}:8080"
    networks:
      - backend
    depends_on:
      - mysql
    restart: always